#!/usr/bin/env python3
"""
Email Sender Script

Sends email notifications for betting edge opportunities.
Part of the edge-alerter skill notification system.

Usage:
    python scripts/notifications/email_sender.py --edges-file edges.json --config config.json
    python scripts/notifications/email_sender.py --test
"""

import argparse
import json
import smtplib
import logging
from pathlib import Path
from datetime import datetime
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import Dict, List
import sys

# Add parent directory to path for imports
sys.path.append(str(Path(__file__).parent.parent.parent))

logger = logging.getLogger(__name__)


class EmailSender:
    """Email notification worker for edge alerts"""
    
    def __init__(self, config: Dict):
        """Initialize email sender
        
        Args:
            config: Email configuration dictionary
        """
        self.config = config.get('email', {})
        self.templates = self._load_templates()
        
    def _load_templates(self) -> Dict:
        """Load email templates"""
        # In a real implementation, this would load from templates file
        return {
            'detailed_edge_alert': {
                'subject': '🔥 {tier} Detected - Week {week}',
                'html_body': '''<!DOCTYPE html>
<html>
<head>
    <title>Bet-That Edge Alert</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background-color: #f8f9fa; padding: 20px; border-radius: 5px; }
        .edge-info { background-color: #e8f5e8; padding: 15px; margin: 10px 0; border-radius: 5px; }
        .recommendation { background-color: #fff3cd; padding: 15px; margin: 10px 0; border-radius: 5px; }
        .stats { background-color: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 5px; }
        .footer { margin-top: 20px; font-size: 12px; color: #666; }
    </style>
</head>
<body>
    <div class="header">
        <h2>🔥 {tier} Detected - Week {week}</h2>
    </div>
    
    <div class="edge-info">
        <h3>{qb_name} {prop_type} vs {opponent}</h3>
        <p><strong>Edge:</strong> {edge_percentage}%</p>
        <p><strong>Tier:</strong> {tier}</p>
        <p><strong>True Probability:</strong> {true_probability}%</p>
        <p><strong>Implied Odds:</strong> {implied_odds}% (at {odds})</p>
    </div>
    
    <div class="recommendation">
        <h4>Recommendation</h4>
        <p><strong>Bet Amount:</strong> ${bet_amount} ({bet_percentage}% of ${bankroll} bankroll)</p>
        <p><strong>Kelly Fraction:</strong> {kelly_fraction}% Kelly ({kelly_type})</p>
    </div>
    
    <div class="stats">
        <h4>Stats</h4>
        <ul>
            <li>{qb_name}: {qb_td_per_game} TD/game ({qb_games} games)</li>
            <li>{opponent} Defense: {defense_td_allowed} TD/game allowed</li>
            <li>Home field advantage: {home_advantage}%</li>
        </ul>
    </div>
    
    <p><strong>Action Required:</strong> {action_message}</p>
    <p><a href="{dashboard_link}">View in Dashboard</a></p>
    
    <div class="footer">
        <p>This alert was generated by Bet-That Edge Finder at {timestamp}</p>
    </div>
</body>
</html>''',
                'text_body': '''🔥 {tier} Detected - Week {week}

{qb_name} {prop_type} vs {opponent}

Edge: {edge_percentage}%
Tier: {tier}
True Probability: {true_probability}%
Implied Odds: {implied_odds}% (at {odds})

Recommendation:
Bet Amount: ${bet_amount} ({bet_percentage}% of ${bankroll} bankroll)
Kelly Fraction: {kelly_fraction}% Kelly ({kelly_type})

Stats:
- {qb_name}: {qb_td_per_game} TD/game ({qb_games} games)
- {opponent} Defense: {defense_td_allowed} TD/game allowed
- Home field advantage: {home_advantage}%

Action Required: {action_message}
Dashboard: {dashboard_link}

This alert was generated by Bet-That Edge Finder at {timestamp}'''
            }
        }
    
    def format_edge_message(self, edge: Dict) -> Dict[str, str]:
        """Format edge data for email template
        
        Args:
            edge: Edge opportunity dictionary
            
        Returns:
            Dictionary with formatted message data
        """
        bet_rec = edge.get('bet_recommendation', {})
        
        # Calculate action message based on edge tier
        tier = bet_rec.get('tier', '')
        if tier == 'STRONG EDGE':
            action_message = "Place bet soon - high confidence opportunity"
        elif tier == 'GOOD EDGE':
            action_message = "Consider placing bet - good opportunity"
        else:
            action_message = "Review opportunity - moderate confidence"
        
        # Format data for template
        formatted_data = {
            'tier': tier,
            'week': edge.get('week', ''),
            'qb_name': edge.get('qb_name', ''),
            'prop_type': 'Over 0.5 TD',  # Default prop type
            'opponent': edge.get('opponent', ''),
            'edge_percentage': f"{edge.get('edge_percentage', 0):.1f}",
            'true_probability': f"{edge.get('true_probability', 0) * 100:.1f}",
            'implied_odds': f"{edge.get('implied_probability', 0) * 100:.1f}",
            'odds': edge.get('odds', ''),
            'bet_amount': f"{bet_rec.get('recommended_bet', 0):.2f}",
            'bet_percentage': f"{bet_rec.get('bankroll_percentage', 0):.1f}",
            'bankroll': '1000',  # Default bankroll
            'kelly_fraction': f"{bet_rec.get('kelly_fraction', 0):.1f}",
            'kelly_type': bet_rec.get('kelly_type', 'conservative'),
            'qb_td_per_game': f"{edge.get('qb_td_per_game', 0):.1f}",
            'qb_games': edge.get('qb_games', 0),
            'defense_td_allowed': f"{edge.get('defense_td_allowed', 0):.1f}",
            'home_advantage': '10',  # Default home advantage
            'action_message': action_message,
            'dashboard_link': f"http://localhost:5001/edges?week={edge.get('week', '')}",
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
        
        return formatted_data
    
    def send_edge_alert(self, edge: Dict) -> bool:
        """Send email alert for a single edge
        
        Args:
            edge: Edge opportunity dictionary
            
        Returns:
            True if sent successfully, False otherwise
        """
        if not self.config.get('enabled', False):
            logger.warning("Email alerts not enabled")
            return False
        
        try:
            # Format message data
            message_data = self.format_edge_message(edge)
            
            # Create message
            msg = MIMEMultipart('alternative')
            msg['Subject'] = self.templates['detailed_edge_alert']['subject'].format(**message_data)
            msg['From'] = self.config.get('from_address', 'alerts@bet-that.com')
            msg['To'] = ', '.join(self.config.get('to_addresses', []))
            
            # Create text and HTML versions
            text_content = self.templates['detailed_edge_alert']['text_body'].format(**message_data)
            html_content = self.templates['detailed_edge_alert']['html_body'].format(**message_data)
            
            text_part = MIMEText(text_content, 'plain')
            html_part = MIMEText(html_content, 'html')
            
            msg.attach(text_part)
            msg.attach(html_part)
            
            # Send email
            with smtplib.SMTP(self.config['smtp_server'], self.config['smtp_port']) as server:
                server.starttls()
                server.login(self.config['username'], self.config['password'])
                
                for to_address in self.config.get('to_addresses', []):
                    server.send_message(msg, to_addrs=[to_address])
                    logger.info(f"Email sent to {to_address}")
            
            return True
            
        except Exception as e:
            logger.error(f"Error sending email: {e}")
            return False
    
    def send_edge_alerts(self, edges: List[Dict]) -> int:
        """Send email alerts for multiple edges
        
        Args:
            edges: List of edge opportunities
            
        Returns:
            Number of emails sent successfully
        """
        if not edges:
            return 0
        
        sent_count = 0
        
        for edge in edges:
            if self.send_edge_alert(edge):
                sent_count += 1
        
        logger.info(f"Sent {sent_count}/{len(edges)} email alerts")
        return sent_count
    
    def test_email_config(self) -> bool:
        """Test email configuration
        
        Returns:
            True if configuration is valid, False otherwise
        """
        try:
            # Test SMTP connection
            with smtplib.SMTP(self.config['smtp_server'], self.config['smtp_port']) as server:
                server.starttls()
                server.login(self.config['username'], self.config['password'])
                logger.info("Email configuration test successful")
                return True
                
        except Exception as e:
            logger.error(f"Email configuration test failed: {e}")
            return False


def main():
    """CLI interface for email sender"""
    parser = argparse.ArgumentParser(description='Email Sender for Edge Alerts')
    parser.add_argument('--edges-file', help='JSON file containing edge data')
    parser.add_argument('--config', help='Configuration file path')
    parser.add_argument('--test', action='store_true', help='Test email configuration')
    parser.add_argument('--verbose', action='store_true', help='Verbose logging')
    
    args = parser.parse_args()
    
    # Configure logging
    log_level = logging.DEBUG if args.verbose else logging.INFO
    logging.basicConfig(level=log_level, format='%(asctime)s - %(levelname)s - %(message)s')
    
    try:
        # Load configuration
        if args.config:
            with open(args.config, 'r') as f:
                config = json.load(f)
        else:
            # Use default config
            config = {
                'email': {
                    'enabled': True,
                    'smtp_server': 'smtp.gmail.com',
                    'smtp_port': 587,
                    'username': 'alerts@bet-that.com',
                    'password': 'app_password',
                    'to_addresses': ['user@example.com']
                }
            }
        
        sender = EmailSender(config)
        
        if args.test:
            success = sender.test_email_config()
            if success:
                print("✅ Email configuration test successful")
            else:
                print("❌ Email configuration test failed")
            return 0 if success else 1
        
        elif args.edges_file:
            # Load edge data
            with open(args.edges_file, 'r') as f:
                edges = json.load(f)
            
            # Send alerts
            sent_count = sender.send_edge_alerts(edges)
            print(f"📧 Sent {sent_count}/{len(edges)} email alerts")
            return 0
        
        else:
            parser.print_help()
            return 1
        
    except Exception as e:
        logger.error(f"Error: {e}")
        return 1


if __name__ == "__main__":
    exit(main())
